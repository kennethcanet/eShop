@inject BasketState BasketState
@implements IDisposable
@rendermode InteractiveAuto

<div class="col-md-4 mb-5">
    <div class="card shadow-sm bg-body">
        <img src="@Product.ImageUrl" class="card-img-top image-url" alt="Product Image">
        <div class="card-body text-center">
            <h5 class="card-title">@Product.Title</h5>
            <p class="card-text text-muted">@Product.Description</p>
            <h4 class="text-primary">$@Product.Price</h4>
            @if (BasketState.IsExists(Product.Id))
            {
                <button class="btn btn-danger w-100" @onclick="RemoveFromCart">Remove from Cart</button>
            }
            else
            {
                <button class="btn btn-primary w-100" @onclick="AddToCart">Add to Cart</button>
            }
        </div>
    </div>
</div>
@code{

    [Parameter]
    public ProductResponse Product { get; set; }

    protected override void OnInitialized()
    {
        BasketState.OnChange += StateHasChanged;
    }
    public void Dispose()
    {
        BasketState.OnChange -= StateHasChanged;
    }
    private async Task AddToCart()
    {
        await BasketState.AddAsync(Product);
    }
    private async Task RemoveFromCart()
    {
        await BasketState.RemoveAsync(Product);
    }
}